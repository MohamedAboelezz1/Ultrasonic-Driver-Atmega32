/******************************************************************************
 *
 * Module: Ultransonic
 *
 * File Name: ultrasonic.h
 *
 * Description: Header file for the HC-SR04 driver
 *
 * Author: Mohamed Aboelezz
 *
 *******************************************************************************/
#include <util/delay.h> /* For the delay functions */
#include "ultrasonic.h"
#include "icu.h"
#include "gpio.h"
#include <avr/io.h>

static uint8 g_edgeCount = 0;
static uint16 g_timeHigh = 0;

/* Initialize the ICU driver as required.
  Setup the ICU call back function.
  Setup the direction for the trigger pin as output pin through the
  GPIO driver.
 */
void Ultrasonic_init(void)
{
	/* Create configuration structure for ICU driver */
	Icu_ConfigType Icu_Config={F_CPU_8,RISING};
	/* Set the Call back function pointer in the ICU driver */
	Icu_setCallBack(Ultrasonic_edgeProcessing);
	/* initialize ICU driver */
	Icu_init(&Icu_Config);
	/*Setup the direction for the trigger pin as output pin through the GPIO driver.*/
	GPIO_setupPinDirection(ULUTRASONIC_TRIGGER_PORT_ID,ULUTRASONIC_TRIGGER_PIN_ID,PIN_OUTPUT);
}

/* Send the Trigger pulse to the ultrasonic. */
void Ultrasonic_Trigger(void)
{
	/* 10us trigger pulse*/
	GPIO_writePin(ULUTRASONIC_TRIGGER_PORT_ID,ULUTRASONIC_TRIGGER_PIN_ID,LOGIC_HIGH);
	_delay_us(10);
	GPIO_writePin(ULUTRASONIC_TRIGGER_PORT_ID,ULUTRASONIC_TRIGGER_PIN_ID,LOGIC_LOW);
}

/* Send the trigger pulse by using Ultrasonic_Trigger function.
   Start the measurements by the ICU from this moment.
   Return: The measured distance in Centimeter.
 */
uint16 Ultrasonic_readDistance(void)
{
	Ultrasonic_Trigger();
	while(1)
	{
		if(g_edgeCount == 2)
		{
			g_edgeCount=0;
			/* calculate the distance */
			return ((float)g_timeHigh*(0.017));
		}
	}
}

/* This is the call back function called by the ICU driver.
   This is used to calculate the high time (pulse time) generated by
   the ultrasonic sensor.
 */
void Ultrasonic_edgeProcessing(void)
{
	g_edgeCount++;
	if(g_edgeCount == 1)
	{
		/*
		 * Clear the timer counter register to start measurements from the
		 * first detected rising edge
		 */
		Icu_clearTimerValue();
		/* Detect falling edge */
		Icu_setEdgeDetectionType(FALLING);
	}
	else if(g_edgeCount == 2)
	{
		/* Store the High time value */
		g_timeHigh = Icu_getInputCaptureValue();
		/* Clear the timer counter register to start measurements again */
		Icu_clearTimerValue();
		/* Detect rising edge */
		Icu_setEdgeDetectionType(RISING);
	}
}
